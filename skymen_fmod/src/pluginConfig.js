// WARNING: DO NOT EDIT THIS FILE, IT IS AUTOGENERATED
module.exports = {
  addonType: "plugin",
  id: "skymen_fmod",
  name: "(FMOD)",
  version: "1.0.0.4",
  category:
    // "3d",
    // "data-and-storage",
    // "form-controls",
    // "input",
    "media",
  // "monetisation",
  // "platform-specific",
  // "web",
  // "other"
  // "general",
  author: "skymen",
  website: "https://www.construct.net",
  documentation: "https://www.construct.net",
  description: "Description",
  // addonUrl: "https://www.construct.net/en/make-games/addons/####/XXXX", // displayed in auto-generated docs
  // githubUrl: "https://github.com/skymen/XXXX", // displays latest release version in auto-generated docs
  // icon: "icon.svg", // defaults to "icon.svg" if omitted
  type: "object", // world, object, dom
  domSideScripts: [
    // "domSide.js", // no need to include "c3runtime/" prefix
  ],
  fileDependencies: [
    /*
    {
      filename: "filename.js", // no need to include "c3runtime/" prefix
      type:
        "copy-to-output"
        "inline-script"
        "external-dom-script"
        "external-runtime-script"
        "external-css"

      // for copy-to-output only
      // fileType: "image/png"
    }
    */
  ],
  info: {
    // world only
    defaultImageUrl: null,
    Set: {
      // world only
      IsResizable: false,
      IsRotatable: false,
      Is3D: false,
      HasImage: false,
      IsTiled: false,
      SupportsZElevation: false,
      SupportsColor: false,
      SupportsEffects: false,
      MustPreDraw: false,

      // object only
      IsSingleGlobal: true,

      // world and object
      CanBeBundled: true,
      IsDeprecated: false,
      GooglePlayServicesEnabled: false,
    },
    AddCommonACEs: {
      // world only
      Position: false,
      SceneGraph: false,
      Size: false,
      Angle: false,
      Appearance: false,
      ZOrder: false,
    },
  },
  properties: [
    /*
    {
      type:
        "integer"
        "float"
        "percent"
        "text"
        "longtext"
        "check"
        "font"
        "combo"
        "color"
        "object"
        "group"
        "link"
        "info"

      id: "property_id",
      options: {
        initialValue: 0,
        interpolatable: false,

        // minValue: 0, // omit to disable
        // maxValue: 100, // omit to disable

        // for type combo only
        // items: [
        //   {itemId1: "item name1" },
        //   {itemId2: "item name2" },
        // ],

        // dragSpeedMultiplier: 1, // omit to disable

        // for type object only
        // allowedPluginIds: ["Sprite", "<world>"],

        // for type link only
        // linkCallback: `function(instOrObj) {}`,
        // linkText: "Link Text",
        // callbackType:
        //   "for-each-instance"
        //   "once-for-type"

        // for type info only
        // infoCallback: `function(inst) {}`,
      },
      name: "Property Name",
      desc: "Property Description",
    }
    */
    {
      type: "longtext",
      id: "allBanks",
      options: {
        initialValue: "",
      },
      name: "All Banks",
      desc: "All the banks that will be used by the game. One bank path per line.",
    },
    {
      type: "longtext",
      id: "preloadBanks",
      options: {
        initialValue: "",
      },
      name: "Preload Banks",
      desc: "The banks that will be preloaded. One bank path per line.",
    },
    {
      type: "longtext",
      id: "preloadBanksNonBlocking",
      options: {
        initialValue: "",
      },
      name: "Load Banks (Non Blocking)",
      desc: "The banks that will be loaded as soon as possible but will not prevent the game from starting. One bank path per line.",
    },
    {
      type: "check",
      id: "autoSuspend",
      options: {
        initialValue: true,
      },
      name: "Auto Suspend",
      desc: "Automatically suspend FMOD when the game is suspended. Disable this if you want to control the suspend state manually.",
    },
  ],
  aceCategories: {
    // follows the format id: langName
    // in the ACEs refer to categories using the id, not the name
    bank: "Bank",
    bus: "Bus",
    vca: "VCA",
    event: "Event",
    parameter: "Parameter",
    positional: "Positional Events",
    listeners: "Listeners",
    general: "General",
  },
  Acts: {
    /*
    SampleAction: {
      // The category of the action as it appears in the add action dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this action
      // Cases where you might not want this are:
      // 1- If the action params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the action in the add action dialog
      highlight: true,

      // Set to true to hide the action in the interface. False by default if not specified.
      deprecated: false,

      // Marks the action as async. Defaults to false if not specified.
      isAsync: false,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          initialValue: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the action as it appears in the add action dialog
      listName: "Sample Action",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      displayText: "Sample action [i]{0}[/i]",

      // The description of the action as it appears in the add action dialog
      description: "This is a sample action",
    },
    */
    LoadBank: {
      category: "bank",
      forward: "_LoadBank",
      autoScriptInterface: true,
      highlight: true,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "The name of the bank",
          type: "string",
          initialValue: "",
        },
      ],
      listName: "Load Bank",
      displayText: "Load bank [i]{0}[/i]",
      description: "Load the specified FMOD bank.",
    },
    UnloadBank: {
      category: "bank",
      forward: "_UnloadBank",
      autoScriptInterface: true,
      highlight: false,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "The name of the bank",
          type: "string",
          initialValue: "",
        },
      ],
      listName: "Unload Bank",
      displayText: "Unload bank [i]{0}[/i]",
      description: "Unload the specified FMOD bank.",
    },
    UnloadAllBanks: {
      category: "bank",
      forward: "_UnloadAllBanks",
      autoScriptInterface: true,
      highlight: false,
      listName: "Unload All Banks",
      displayText: "Unload all banks",
      description: "Unload all FMOD banks.",
    },
    StartOneTimeEvent: {
      category: "event",
      forward: "_StartOneTimeEvent",
      autoScriptInterface: true,
      highlight: true,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "The name of the event",
          type: "string",
          initialValue: "",
        },
      ],
      listName: "Start One Time Event",
      displayText: "Start one time event [i]{0}[/i]",
      description:
        "Start the specified FMOD event as a one-time event. This instance will be released immediately.",
    },
    InstantiateEvent: {
      category: "event",
      forward: "_InstantiateEvent",
      autoScriptInterface: true,
      highlight: true,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "The name of the event",
          type: "string",
          initialValue: "",
        },
        {
          id: "tags",
          name: "Tags",
          desc: "A space-separated list of tags",
          type: "string",
          initialValue: "",
        },
      ],
      listName: "Instantiate Event",
      displayText: "Instantiate event [i]{0}[/i] with tags [i]{1}[/i]",
      description:
        "Instantiate the specified FMOD event. This doesn't start it. Use this when you need to change the event parameters before starting it.",
    },
    StartEvent: {
      category: "event",
      forward: "_StartEvent",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "The name of the event",
          type: "string",
          initialValue: "",
        },
        {
          id: "tag",
          name: "Tag",
          desc: "A given tag to target",
          type: "string",
          initialValue: "",
        },
        {
          id: "destroyWhenStopped",
          name: "Release",
          desc: "Releasing this event will free its memory when it stops playing and will remove it from the tag on the next tick",
          type: "boolean",
          initialValue: "true",
        },
      ],
      listName: "Start Event",
      displayText: "Start event [i]{0}[/i] with tag [i]{1}[/i] (destroy: {2})",
      description: "Start the specified FMOD event.",
    },
    StartEventAtObject: {
      category: "event",
      forward: "_StartEventAtObject",
      autoScriptInterface: false,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "The name of the event",
          type: "string",
          initialValue: "",
        },
        {
          id: "object",
          name: "Object",
          desc: "The object to start the event at",
          type: "object",
          initialValue: "",
          allowedPluginIds: ["<world>"],
        },
        {
          id: "tag",
          name: "Tag",
          desc: "A given tag to target",
          type: "string",
          initialValue: "",
        },
        {
          id: "destroyWhenStopped",
          name: "Release",
          desc: "Releasing this event will free its memory when it stops playing and will remove it from the tag on the next tick",
          type: "boolean",
          initialValue: "true",
        },
        {
          id: "forwardMode",
          name: "Forward Mode",
          desc: "The forward mode",
          type: "combo",
          initialValue: "camera",
          items: [{ camera: "2D" }, { angle: "3D" }],
        },
      ],
      listName: "Start Event At Object",
      displayText:
        "Start event [i]{0}[/i] with tag [i]{2}[/i] at object [i]{1}[/i] (destroy: {3}, forward mode: {4})",
      description: "Start the specified FMOD event at the specified object.",
    },
    SetEventParameter: {
      category: "parameter",
      forward: "_SetEventParameter",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "The name of the event",
          type: "string",
          initialValue: "",
        },
        {
          id: "tag",
          name: "Tag",
          desc: "A given tag to target",
          type: "string",
          initialValue: "",
        },
        {
          id: "parameter",
          name: "Parameter",
          desc: "The name of the parameter",
          type: "string",
          initialValue: "",
        },
        {
          id: "value",
          name: "Value",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "ignoreSeekSpeed",
          name: "Ignore seek speed",
          desc: "",
          type: "boolean",
          initialValue: "false",
        },
      ],
      listName: "Set Event Parameter",
      displayText:
        "Set event parameter [i]{2}[/i] on event [i]{0}[/i] with tags [i]{1}[/i] to [i]{3}[/i] (ignore seek speed: [i]{4}[/i])",
      description: "Set a parameter value for the specified FMOD event.",
    },
    SetEventParameterWithLabel: {
      category: "parameter",
      forward: "_SetEventParameterWithLabel",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "tag",
          name: "Tag",
          desc: "A given tag to target",
          type: "string",
          initialValue: "",
        },
        {
          id: "parameter",
          name: "Parameter",
          desc: "The name of the parameter",
          type: "string",
          initialValue: "",
        },
        {
          id: "value",
          name: "Value",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "ignoreSeekSpeed",
          name: "Ignore seek speed",
          desc: "",
          type: "boolean",
          initialValue: "false",
        },
      ],
      listName: "Set Event Parameter With Label",
      displayText:
        "Set event parameter [i]{2}[/i] on event [i]{0}[/i] with tags [i]{1}[/i] to label [i]{3}[/i] (ignore seek speed: [i]{4}[/i])",
      description:
        "Set a parameter value for the specified FMOD event, using the parameter label instead of the parameter name.",
    },
    SetGlobalParameter: {
      category: "parameter",
      forward: "_SetGlobalParameter",
      autoScriptInterface: true,
      highlight: true,
      async: true,
      params: [
        {
          id: "parameter",
          name: "Parameter",
          desc: "The name of the parameter",
          type: "string",
          initialValue: "",
        },
        {
          id: "value",
          name: "Value",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "ignoreSeekSpeed",
          name: "Ignore seek speed",
          desc: "",
          type: "boolean",
          initialValue: "false",
        },
      ],
      listName: "Set Global Parameter",
      displayText:
        "Set global parameter [i]{0}[/i] to [i]{1}[/i] (ignore seek speed: [i]{2}[/i])",
      description: "Set a global parameter value for FMOD.",
    },
    SetGlobalParameterWithLabel: {
      category: "parameter",
      forward: "_SetGlobalParameterWithLabel",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "parameter",
          name: "Parameter",
          desc: "The name of the parameter",
          type: "string",
          initialValue: "",
        },
        {
          id: "value",
          name: "Value",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "ignoreSeekSpeed",
          name: "Ignore seek speed",
          desc: "",
          type: "boolean",
          initialValue: "false",
        },
      ],
      listName: "Set Global Parameter With Label",
      displayText:
        "Set global parameter [i]{0}[/i] to label [i]{1}[/i] (ignore seek speed: [i]{2}[/i])",
      description:
        "Set a global parameter value for FMOD, using the parameter label instead of the parameter name.",
    },
    StopEventInstance: {
      category: "event",
      forward: "_StopEvent",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "The name of the event",
          type: "string",
          initialValue: "",
        },
        {
          id: "tag",
          name: "Tag",
          desc: "A given tag to target",
          type: "string",
          initialValue: "",
        },
        {
          id: "allowFadeOut",
          name: "Allow fade out",
          desc: "",
          type: "boolean",
          initialValue: "true",
        },
        {
          id: "release",
          name: "Release",
          desc: "Releasing this event will free its memory when it stops playing and will remove it from the tag.",
          type: "boolean",
          initialValue: "true",
        },
      ],
      listName: "Stop Event",
      displayText:
        "Stop event [i]{0}[/i] with tag [i]{1}[/i] (allow fade out: [i]{2}[/i], release: [i]{3}[/i])",
      description:
        "Stop the specified FMOD event, with an option to allow fade out.",
    },
    StopAllEventInstances: {
      category: "event",
      forward: "_StopAllEvents",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "The name of the event",
          type: "string",
          initialValue: "",
        },
        {
          id: "allowFadeOut",
          name: "Allow fade out",
          desc: "",
          type: "boolean",
          initialValue: "true",
        },
        {
          id: "release",
          name: "Release",
          desc: "Releasing this event will free its memory when it stops playing and will remove it from the tag.",
          type: "boolean",
          initialValue: "true",
        },
      ],
      listName: "Stop All Events",
      displayText:
        "Stop all events [i]{0}[/i] (allow fade out: [i]{1}[/i], release: [i]{2}[/i])",
      description: "Stop all FMOD events.",
    },
    ReleaseEventInstance: {
      category: "event",
      forward: "_ReleaseEventInstance",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "The name of the event",
          type: "string",
          initialValue: "",
        },
        {
          id: "tag",
          name: "Tag",
          desc: "A given tag to target",
          type: "string",
          initialValue: "",
        },
      ],
      listName: "Release Event Instance",
      displayText: "Release event instance [i]{0}[/i] with tag [i]{1}[/i]",
      description: "Release the specified FMOD event instance.",
    },
    ReleaseAllEventInstances: {
      category: "event",
      forward: "_ReleaseAllEventInstances",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "",
          type: "string",
          initialValue: "",
        },
      ],
      listName: "Release All Event Instances",
      displayText: "Release all event instances [i]{0}[/i]",
      description: "Release all FMOD event instances.",
    },
    SetEventPaused: {
      category: "event",
      forward: "_SetEventPaused",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "tag",
          name: "Tag",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "paused",
          name: "Paused",
          desc: "",
          type: "boolean",
          initialValue: "true",
        },
      ],
      listName: "Set Event Paused",
      displayText:
        "Set event [i]{0}[/i] with tag [i]{1}[/i] paused: [i]{2}[/i]",
      description: "Set the paused state of the specified FMOD event.",
    },
    SetEvent3DAttributes: {
      category: "positional",
      forward: "_SetEvent3DAttributes",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "tag",
          name: "Tag",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "x",
          name: "X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "y",
          name: "Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "z",
          name: "Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "velocity-x",
          name: "Velocity X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "velocity-y",
          name: "Velocity Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "velocity-z",
          name: "Velocity Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "forward-x",
          name: "Forward X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "forward-y",
          name: "Forward Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "forward-z",
          name: "Forward Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "up-x",
          name: "Up X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "up-y",
          name: "Up Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "up-z",
          name: "Up Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
      ],
      listName: "Set Event 3D Attributes",
      displayText:
        "Set event [i]{0}[/i] with tag [i]{1}[/i] 3D attributes: position: ([i]{2}[/i], [i]{3}[/i], [i]{4}[/i]), velocity: ([i]{5}[/i], [i]{6}[/i], [i]{7}[/i]), forward: ([i]{8}[/i], [i]{9}[/i], [i]{10}[/i]), up: ([i]{11}[/i], [i]{12}[/i], [i]{13}[/i])",
      description: "Set the 3D attributes of the specified FMOD event.",
    },
    SetEvent3DAttributesFromObject: {
      category: "positional",
      forward: "_SetEvent3DAttributesFromObject",
      autoScriptInterface: false,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "tag",
          name: "Tag",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "object",
          name: "Object",
          desc: "",
          type: "object",
          initialValue: "",
          allowedPluginIds: ["<world>"],
        },
        {
          id: "forwardMode",
          name: "Forward Mode",
          desc: "",
          type: "combo",
          initialValue: "camera",
          items: [{ camera: "2D" }, { angle: "3D" }],
        },
        {
          id: "velocity-x",
          name: "Velocity X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "velocity-y",
          name: "Velocity Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "velocity-z",
          name: "Velocity Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
      ],
      listName: "Set Event 3D Attributes From Object",
      displayText:
        "Set event [i]{0}[/i] with tag [i]{1}[/i] 3D attributes from object [i]{2}[/i] (forward mode: [i]{3}[/i]) velocity: ([i]{4}[/i], [i]{5}[/i], [i]{6}[/i])",
      description:
        "Set the 3D attributes of the specified FMOD event from the specified object.",
    },
    SetEventSimpleAttributesFromObject: {
      category: "positional",
      forward: "_SetEvent3DAttributesSimpleFromObject",
      autoScriptInterface: false,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "tag",
          name: "Tag",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "object",
          name: "Object",
          desc: "",
          type: "object",
          initialValue: "",
          allowedPluginIds: ["<world>"],
        },
        {
          id: "forwardMode",
          name: "Forward Mode",
          desc: "",
          type: "combo",
          initialValue: "camera",
          items: [{ camera: "Camera" }, { angle: "Angle" }],
        },
      ],
      listName: "Set Event Simple Attributes From Object",
      displayText:
        "Set event [i]{0}[/i] with tag [i]{1}[/i] 3D attributes from object [i]{2}[/i] (forward mode: [i]{3}[/i])",
      description:
        "Set the 3D attributes of the specified FMOD event from the specified object.",
    },
    SetEventSimpleAttributes: {
      category: "positional",
      forward: "_SetEvent3DAttributesSimple",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "tag",
          name: "Tag",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "x",
          name: "X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "y",
          name: "Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "z",
          name: "Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
      ],
      listName: "Set Event Simple Attributes",
      displayText:
        "Set event [i]{0}[/i] with tag [i]{1}[/i] 3D attributes: position: ([i]{2}[/i], [i]{3}[/i], [i]{4}[/i])",
      description: "Set the 3D attributes of the specified FMOD event.",
    },
    SetListener3DAttributes: {
      category: "listeners",
      forward: "_SetListener3DAttributes",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "id",
          name: "Id",
          desc: "The listener id from 0 to 7",
          type: "number",
          initialValue: "0",
        },
        {
          id: "x",
          name: "X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "y",
          name: "Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "z",
          name: "Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "velocity-x",
          name: "Velocity X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "velocity-y",
          name: "Velocity Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "velocity-z",
          name: "Velocity Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "forward-x",
          name: "Forward X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "forward-y",
          name: "Forward Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "forward-z",
          name: "Forward Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "up-x",
          name: "Up X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "up-y",
          name: "Up Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "up-z",
          name: "Up Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "hasSeparateAttenuationPosition",
          name: "Has separate attenuation position",
          desc: "",
          type: "boolean",
          initialValue: "false",
        },
        {
          id: "attenuation-x",
          name: "Attenuation X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "attenuation-y",
          name: "Attenuation Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "attenuation-z",
          name: "Attenuation Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
      ],
      listName: "Set Listener 3D Attributes",
      displayText:
        "Set listener [i]{0}[/i] 3D attributes: position: ([i]{1}[/i], [i]{2}[/i], [i]{3}[/i]), velocity: ([i]{4}[/i], [i]{5}[/i], [i]{6}[/i]), forward: ([i]{7}[/i], [i]{8}[/i], [i]{9}[/i]), up: ([i]{10}[/i], [i]{11}[/i], [i]{12}[/i]), attenuation? ([i]{13}[/i]) : ([i]{14}[/i], [i]{15}[/i], [i]{16}[/i])",
      description: "Set the 3D attributes of the specified FMOD listener.",
    },
    SetListener3DAttributesFromCamera: {
      category: "listeners",
      forward: "_SetListener3DAttributesFromCamera",
      autoScriptInterface: false,
      highlight: false,
      async: true,
      params: [
        {
          id: "id",
          name: "Id",
          desc: "The listener id from 0 to 7",
          type: "number",
          initialValue: "0",
        },
        {
          id: "camera",
          name: "Camera",
          desc: "",
          type: "object",
          initialValue: "",
          allowedPluginIds: ["Camera3D"],
        },
        {
          id: "velocity-x",
          name: "Velocity X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "velocity-y",
          name: "Velocity Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "velocity-z",
          name: "Velocity Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "hasSeparateAttenuationPosition",
          name: "Has separate attenuation position",
          desc: "",
          type: "boolean",
          initialValue: "false",
        },
        {
          id: "attenuation-x",
          name: "Attenuation X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "attenuation-y",
          name: "Attenuation Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "attenuation-z",
          name: "Attenuation Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
      ],
      listName: "Set Listener 3D Attributes From Camera",
      displayText:
        "Set listener [i]{0}[/i] 3D attributes from camera [i]{1}[/i]: velocity: ([i]{2}[/i], [i]{3}[/i], [i]{4}[/i]), attenuation? ([i]{5}[/i]) : ([i]{6}[/i], [i]{7}[/i], [i]{8}[/i])",
      description:
        "Set the 3D attributes of the specified FMOD listener from the specified camera.",
    },
    SetListener3DAttributesFromScrollPosition: {
      category: "listeners",
      forward: "_SetListener3DAttributesFromScrollPosition",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "id",
          name: "Id",
          desc: "The listener id from 0 to 7",
          type: "number",
          initialValue: "0",
        },
        {
          id: "velocity-x",
          name: "Velocity X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "velocity-y",
          name: "Velocity Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "hasSeparateAttenuationPosition",
          name: "Has separate attenuation position",
          desc: "",
          type: "boolean",
          initialValue: "false",
        },
        {
          id: "attenuation-x",
          name: "Attenuation X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "attenuation-y",
          name: "Attenuation Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
      ],
      listName: "Set Listener 3D Attributes From Scroll Position",
      displayText:
        "Set listener [i]{0}[/i] 3D attributes from scroll position: velocity: ([i]{1}[/i], [i]{2}[/i]), attenuation? ([i]{3}[/i]) : ([i]{4}[/i], [i]{5}[/i])",
      description:
        "Set the 3D attributes of the specified FMOD listener from the scroll position.",
    },
    SetListenerSimpleAttributes: {
      category: "listeners",
      forward: "_SetListener3DAttributesSimple",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "id",
          name: "Id",
          desc: "The listener id from 0 to 7",
          type: "number",
          initialValue: "0",
        },
        {
          id: "x",
          name: "X",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "y",
          name: "Y",
          desc: "",
          type: "number",
          initialValue: "0",
        },
        {
          id: "z",
          name: "Z",
          desc: "",
          type: "number",
          initialValue: "0",
        },
      ],
      listName: "Set Listener Simple Attributes",
      displayText:
        "Set listener [i]{0}[/i] simple attributes: position: ([i]{1}[/i], [i]{2}[/i], [i]{3}[/i])",
      description: "Set the simple attributes of the specified FMOD listener.",
    },
    SetListenerSimpleAttributesFromScrollPosition: {
      category: "listeners",
      forward: "_SetListener3DAttributesSimpleFromScrollPosition",
      autoScriptInterface: true,
      highlight: true,
      async: true,
      params: [
        {
          id: "id",
          name: "Id",
          desc: "The listener id from 0 to 7",
          type: "number",
          initialValue: "0",
        },
      ],
      listName: "Set Listener Simple Attributes From Scroll Position",
      displayText:
        "Set listener [i]{0}[/i] simple attributes from scroll position",
      description:
        "Set the simple attributes of the specified FMOD listener from the scroll position.",
    },
    SetListenerWeight: {
      category: "listeners",
      forward: "_SetListenerWeight",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "id",
          name: "Id",
          desc: "The listener id from 0 to 7",
          type: "number",
          initialValue: "0",
        },
        {
          id: "weight",
          name: "Weight",
          desc: "0-1",
          type: "number",
          initialValue: "0",
        },
      ],
      listName: "Set Listener Weight",
      displayText: "Set listener [i]{0}[/i] weight to [i]{1}[/i]",
      description: "Set the weight of the specified FMOD listener.",
    },
    SetNbListeners: {
      category: "listeners",
      forward: "_SetNbListeners",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "nb",
          name: "Nb",
          desc: "A number of listeners, from 1 to 8",
          type: "number",
          initialValue: "0",
        },
      ],
      listName: "Set Nb Listeners",
      displayText: "Set nb listeners to [i]{0}[/i]",
      description: "Set the number of FMOD listeners.",
    },
    SetBusMuted: {
      category: "bus",
      forward: "_SetBusMuted",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "muted",
          name: "Muted",
          desc: "",
          type: "boolean",
          initialValue: "true",
        },
      ],
      listName: "Set Bus Muted",
      displayText: "Set bus [i]{0}[/i] muted: [i]{1}[/i]",
      description: "Set the muted state of the specified FMOD bus.",
    },
    SetBusVolume: {
      category: "bus",
      forward: "_SetBusVolume",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "volume",
          name: "Volume",
          desc: "",
          type: "number",
          initialValue: "0",
        },
      ],
      listName: "Set Bus Volume",
      displayText: "Set bus [i]{0}[/i] volume to [i]{1}[/i]",
      description: "Set the volume of the specified FMOD bus.",
    },
    SetVCAVolume: {
      category: "vca",
      forward: "_SetVCAVolume",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "name",
          name: "Name",
          desc: "",
          type: "string",
          initialValue: "",
        },
        {
          id: "volume",
          name: "Volume",
          desc: "",
          type: "number",
          initialValue: "0",
        },
      ],
      listName: "Set VCA Volume",
      displayText: "Set VCA [i]{0}[/i] volume to [i]{1}[/i]",
      description: "Set the volume of the specified FMOD VCA.",
    },
    SetAutoSuspend: {
      category: "general",
      forward: "_SetAutoSuspend",
      autoScriptInterface: true,
      highlight: false,
      async: false,
      params: [
        {
          id: "autoSuspend",
          name: "Auto suspend",
          desc: "",
          type: "boolean",
          initialValue: "true",
        },
      ],
      listName: "Set Auto Suspend",
      displayText: "Set auto suspend to [i]{0}[/i]",
      description: "Set the auto suspend state of FMOD.",
    },
    SetSuspended: {
      category: "general",
      forward: "_SetSuspended",
      autoScriptInterface: true,
      highlight: false,
      async: true,
      params: [
        {
          id: "suspended",
          name: "Suspended",
          desc: "",
          type: "boolean",
          initialValue: "true",
        },
      ],
      listName: "Set Suspended",
      displayText: "Set suspended to [i]{0}[/i]",
      description: "Set the suspended state of FMOD.",
    },
  },
  Cnds: {
    /*
    SampleCondition: {
      // The category of the action as it appears in the add condition dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this condition
      // Cases where you might not want this are:
      // 1- If the condition params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the condition in the add condition dialog
      highlight: true,

      // Set to true to hide the condition in the interface. False by default if not specified.
      deprecated: false,

      // special conditions properties. These can all be omitted, and they will default to the following values:
      isTrigger: false,
      isFakeTrigger: false,
      isStatic: false,
      isLooping: false,
      isInvertible: true,
      isCompatibleWithTriggers: true,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          initialValue: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the condition as it appears in the add condition dialog
      listName: "Sample Condition",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      displayText: "Sample condition [i]{0}[/i]",

      // The description of the condition as it appears in the add condition dialog
      description: "This is a sample condition",
    },
    */
    IsInitialised: {
      category: "general",
      forward: "_IsInitialised",
      autoScriptInterface: true,
      highlight: false,
      listName: "Is Initialised",
      displayText: "Is initialised",
      description: "True if FMOD is initialised.",
    },
  },
  Exps: {
    /*
    SampleExpression: {
      // The category of the action as it appears in the expression picker
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this expression
      // Cases where you might not want this are:
      // 1- If you don't want it to appear in the script interface
      // 2- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the expression in the expression picker
      highlight: true,

      // Set to true to hide the expression in the interface. False by default if not specified.
      deprecated: false,

      // The type of the expression.
      returnType:
        - "string"
        - "number"
        - "any" // must be either string or number

      // Set to true if the expression is variadic. False by default if not specified.
      isVariadicParameters: false

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
        },
      ],

      // The description of the expression as it appears in the expression picker
      description: "This is a sample expression",
    },
    */
  },
};
